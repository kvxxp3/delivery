{"version":3,"file":"src_app_home_discover_discover_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAER;AAE/C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wDAAY;KACxB;IACD;QACE,IAAI,EAAE,cAAc;QACpB,YAAY,EAAE,GAAG,EAAE,CAAC,8MAA4C,CAAC,IAAI,CAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,qBAAqB,CAAC;KACrG;CACF,CAAC;IAMW,yBAAyB,SAAzB,yBAAyB;CAAG;AAA5B,yBAAyB;IAJrC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,yBAAyB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACpBG;AACM;AACF;AAEA;AAEyB;AAEvB;IAWlC,kBAAkB,SAAlB,kBAAkB;CAAG;AAArB,kBAAkB;IAT9B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,+EAAyB;SAC1B;QACD,YAAY,EAAE,CAAC,wDAAY,CAAC;KAC7B,CAAC;GACW,kBAAkB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;ACnB8B;AACiB;AAEtB;AAEN;AAET;IAO5B,YAAY,SAAZ,YAAY;IAavB,YAAoB,aAA4B,EAAU,WAAwB,EAAU,iBAAoC,EAAU,MAAc;QAApI,kBAAa,GAAb,aAAa,CAAe;QAAU,gBAAW,GAAX,WAAW,CAAa;QAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;QAAU,WAAM,GAAN,MAAM,CAAQ;QANxJ,WAAM,GAAG,KAAK,CAAC;QACf,WAAM,GAAG,KAAK,CAAC;QAEf,2CAA2C;QAC3C,oBAAe,GAAmB,EAAE,CAAC;IAEuH,CAAC;IAE7J,QAAQ;IACR,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,WAAW;IACX,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC,SAAS,CAC3C,CAAC,GAAG,EAAE,EAAE;YACN,4DAA4D;YAC5D,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACvC,mFAAmF;YACnF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAChD,CAAC,EACD,CAAC,CAAC,EAAE,EAAE;YACJ,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QAC7B,CAAC,CACF,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,CAAM;QAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,GAAC,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC;CAiEF;;YAnHQ,0DAAa;YAFb,kEAAW;YAFgB,6DAAiB;YAM5C,mDAAM;;AAOF,YAAY;IALxB,wDAAS,CAAC;QACT,QAAQ,EAAE,cAAc;QACxB,qEAAmC;;KAEpC,CAAC;GACW,YAAY,CA0GxB;AA1GwB","sources":["./src/app/home/discover/discover-routing.module.ts","./src/app/home/discover/discover.module.ts","./src/app/home/discover/discover.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DiscoverPage } from './discover.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: DiscoverPage\n  },\n  {\n    path: 'place-detail',\n    loadChildren: () => import('./place-detail/place-detail.module').then( m => m.PlaceDetailPageModule)\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class DiscoverPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { DiscoverPageRoutingModule } from './discover-routing.module';\n\nimport { DiscoverPage } from './discover.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    DiscoverPageRoutingModule\n  ],\n  declarations: [DiscoverPage]\n})\nexport class DiscoverPageModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { InfiniteScrollCustomEvent, LoadingController } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { Place } from '../place.model';\nimport { PlacesService } from '../places.service';\nimport { Restaurantes } from 'src/app/interfaces/restaurantes';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-discover',\n  templateUrl: './discover.page.html',\n  styleUrls: ['./discover.page.scss'],\n})\nexport class DiscoverPage implements OnInit, OnDestroy {\n  //NEW\n  places: Place[];\n  //PAST PROJECT\n  loadedPlaces: Place[];\n  bookable: Place[];\n  relevant: Place[];\n  filter = 'all';\n  userId = 'new';\n  private placesSub: Subscription;\n  ///////////////////////////////////////////\n  listRestaurants: Restaurantes[] = [];\n\n  constructor(private placesService: PlacesService, private authService: AuthService, private loadingController: LoadingController, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  ionViewWillEnter() {\n    this.listarRestaurantes();\n  }\n\n  ngOnDestroy(): void {\n  }\n\n  listarRestaurantes(): void{\n    this.placesService.getRestaurants().subscribe(\n      (res) => {\n        //variable para guardar la conversion de datos json a string\n        const listString = JSON.stringify(res);\n        //concatena los datos que se reciben uno a uno en listString en el arreglo ListCoor\n        this.listRestaurants = JSON.parse(listString);\n      },\n      (e) => {\n        console.log('ERROR: ' + e);\n      }\n    );\n  }\n\n  onClickItem(i: any){\n    this.router.navigate(['/pruebas/'+i]);\n  }\n  /*\n  ngOnInit() {\n    this.placesSub = this.placesService.places.subscribe(places => {\n      this.loadedPlaces = places;\n      this.onFilterUpdate(this.filter);\n    });\n  }\n\n  onFilterUpdate(filter: string){\n    const isShown = place => filter === 'all' || place.userId !== this.authService.userId;\n    this.relevant = this.loadedPlaces.filter(isShown);\n    this.userId = this.authService.userId;\n    this.filter = filter;\n    console.log('value it: ' + this.filter);\n  }\n\n  ionViewWillEnter() {\n    this.loadPlaces();\n  }\n\n  async loadPlaces(event?: InfiniteScrollCustomEvent) {\n    const loading = await this.loadingController.create({\n      message: 'Loading...',\n      spinner: 'bubbles'\n    }\n    );\n    await loading.present();\n    //convertir data json recibido del servidor a string\n    this.placesService.listPlaces().subscribe(\n      (resp) => {\n        loading.dismiss();\n        const listString = JSON.stringify(resp);\n        //lista todos los lugares\n        this.places = JSON.parse(listString);\n        //lista solos los que puede hacer reservacion\n        this.bookable = JSON.parse(listString);\n        console.log('userId: ' + this.authService.userId);\n        //let j=0;\n        for (let i = 0; i < this.bookable.length; i++) {\n          console.log('JSON Places ' + i + ': ' + this.bookable[i].title);\n\n          if (this.bookable[i].userId === this.authService.userId) {\n            console.log('entro a filtro '+this.bookable[i].title);\n            this.bookable.splice(i,i);\n            if(i!==0){i--;}\n          }\n\n        }\n        event?.target.complete();\n      },\n      (err) => {\n        console.log(err.message);\n        loading.dismiss();\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.placesSub) {\n      this.placesSub.unsubscribe();\n    }\n  }\n  */\n\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}